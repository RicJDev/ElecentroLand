Procedimiento Hotel(E/S: contador_clientes = 0, cant_acompañantes = 0, clientes_hotel = 0, clientes[contador_clientes], cantidad_habitacion1 = 250, cantidad_habitacion2 = 100, cantidad_habitacion3 = 80, cantidad_habitacion4 = 70, id_cliente, dias_hospedaje, telefono, edad_usuario, cedula, id_ingresado, validacion_final, id_cliente_reservacion: Entero, total_pagar_habitacion: Real, fecha_llegada, fecha_salida, nombre_apellido, email: Cadena);
Inicio
  Var opc_hotel = entero;
  Repetir

    Mostrar << "1: Registrar un nuevo cliente";
    Mostrar << "2: Realizar una reserva";
    Mostrar << "3: Consulta de estadisticas del hotel";
    Mostrar << "4: Metodos de Pago";
    Mostrar << "5: Check-out";
    Mostrar << "6: Salir del sistema";
    Leer >> opc_hotel;

    Mientras (opc_hotel < 1 OR opc_hotel > 6) Hacer;
      Mostrar << "Estimado usuario, error en opcion seleccionada, intente de nuevo";
      Leer >> opc_hotel;
    Fin_Mientras

    En_Caso (opc_hotel > 0) Sea;
      Caso (opc_hotel = 1);
        registro_nuevo_cliente(nombre_apellido, telefono, edad_usuario, cedula, email, id_cliente, cant_acompañantes, clientes_hotel = 0);
        Mostrar << registro_nuevo_cliente;
      Caso (opc_hotel = 2);
        reserva_habitaciones(clientes[contador_clientes], total_pagar_habitacion, dias_hospedaje, fecha_llegada, fecha_salida);
        Mostrar << reserva_habitaciones;
      Caso (opc_hotel = 3);
        estadisticas(clientes[contador_clientes], clientes_hotel, cantidad_habitacion1, cantidad_habitacion2, cantidad_habitacion3, cantidad_habitacion4);
        Mostrar << estadisticas;
      Caso (opc_hotel = 4);
        metodo_de_pago(clientes[contador_clientes]);
        Mostrar << metodo_de_pago;
      Caso (opc_hotel = 5);
        check_out(contador_clientes, cantidad_habitacion1, cantidad_habitacion2, cantidad_habitacion3, cantidad_habitacion4, id_ingresado, validacion_final);
        Mostrar << check_out;
      Otro_Caso
        opc_hotel = 6;
    Fin_Caso

    Hasta (opc_hotel = 6);
  Fin_Repetir
Fin_Procedimiento

Funcion validacion(id_ingresado, validacion_final, clientes[contador_clientes]: Entero): Booleano;
Inicio

  Mientras (I = 1 Hasta I = contador_clientes) Hacer;
    Si id_ingresado != clientes[contador_clientes];
    validacion_final = 0;
    Sino
    validacion_final = 1;
  Fin_Si

  Devolver (validacion_final);
Fin_Funcion